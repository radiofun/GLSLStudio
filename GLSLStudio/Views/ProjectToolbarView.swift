import SwiftUI

struct ProjectToolbarView: View {
    let project: ShaderProject
    @EnvironmentObject var projectsViewModel: ProjectsViewModel
    
    @State private var showingExportSheet = false
    @State private var showingRenameAlert = false
    @State private var newProjectName = ""
    
    var body: some View {
        HStack(spacing: 8) {
            
            Button(action: {
                projectsViewModel.saveProject(project)
            }) {
                Text("Save")
                    .font(.title2)
                    .foregroundStyle(.blue)
            }

            Menu {
                Button(action: { showingRenameAlert = true }) {
                    Label("Rename", systemImage: "pencil")
                }
                
                Button(action: {
                    _ = projectsViewModel.duplicateProject(project)
                }) {
                    Label("Duplicate", systemImage: "doc.on.doc")
                }
                
                Divider()
                
                Button(action: { showingExportSheet = true }) {
                    Label("Export", systemImage: "square.and.arrow.up")
                }
            } label: {
                Image(systemName: "ellipsis.circle")
                    .font(.title2)
                    .foregroundColor(.blue)
            }
            
            
        }
        .alert("Rename Project", isPresented: $showingRenameAlert) {
            TextField("Project Name", text: $newProjectName)
            Button("Cancel", role: .cancel) {}
            Button("Rename") {
                if !newProjectName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                    project.name = newProjectName.trimmingCharacters(in: .whitespacesAndNewlines)
                    projectsViewModel.saveProject(project)
                }
            }
        } message: {
            Text("Enter a new name for this project")
        }
        .sheet(isPresented: $showingExportSheet) {
            EnhancedExportSheet(project: project)
        }
        .onAppear {
            newProjectName = project.name
        }
    }
}

struct ExportSheet: View {
    let project: ShaderProject
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                Text("Export Project")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                VStack(spacing: 16) {
                    ExportOption(
                        title: "Export as Image",
                        description: "Save current frame as PNG",
                        icon: "photo"
                    ) {
                        // TODO: Implement image export
                        dismiss()
                    }
                    
                    ExportOption(
                        title: "Export Shader Code",
                        description: "Share vertex and fragment shaders",
                        icon: "doc.text"
                    ) {
                        exportShaderCode()
                        dismiss()
                    }
                    
                    ExportOption(
                        title: "Export Project",
                        description: "Save complete project file",
                        icon: "folder"
                    ) {
                        // TODO: Implement project export
                        dismiss()
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    private func exportShaderCode() {
        guard let vertexShader = project.vertexShader,
              let fragmentShader = project.fragmentShader else { return }
        
        let exportText = """
// \(project.name)
// Generated by GLSL Studio

// Vertex Shader
\(vertexShader.content)

// Fragment Shader
\(fragmentShader.content)
"""
        
        let activityController = UIActivityViewController(
            activityItems: [exportText],
            applicationActivities: nil
        )
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(activityController, animated: true)
        }
    }
}

struct ExportOption: View {
    let title: String
    let description: String
    let icon: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.title2)
                    .foregroundColor(.accentColor)
                    .frame(width: 32, height: 32)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(title)
                        .font(.headline)
                        .foregroundColor(.primary)
                    
                    Text(description)
                        .font(.body)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
}
