import Foundation
import UIKit
import SwiftUI

class ExportService: ObservableObject {
    
    func exportShaderCode(project: ShaderProject) -> String {
        guard let vertexShader = project.vertexShader,
              let fragmentShader = project.fragmentShader else {
            return "// No shaders found"
        }
        
        let timestamp = DateFormatter.localizedString(from: Date(), dateStyle: .medium, timeStyle: .short)
        
        return """
// \(project.name)
// Generated by GLSL Studio on \(timestamp)

// Vertex Shader
\(vertexShader.content)

// Fragment Shader
\(fragmentShader.content)
"""
    }
    
    func exportProjectData(project: ShaderProject) -> Data? {
        let exportData = ProjectExportData(
            name: project.name,
            createdDate: project.createdDate,
            lastModifiedDate: project.lastModifiedDate,
            vertexShader: project.vertexShader?.content ?? "",
            fragmentShader: project.fragmentShader?.content ?? "",
            thumbnailData: project.thumbnailData
        )
        
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .iso8601
        encoder.outputFormatting = .prettyPrinted
        
        return try? encoder.encode(exportData)
    }
    
    func shareContent(_ content: String, from view: UIView) {
        let activityController = UIActivityViewController(
            activityItems: [content],
            applicationActivities: nil
        )
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first,
           let rootViewController = window.rootViewController {
            
            // For iPad
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = view
                popover.sourceRect = view.bounds
            }
            
            rootViewController.present(activityController, animated: true)
        }
    }
    
    func shareImage(_ image: UIImage, from view: UIView) {
        let activityController = UIActivityViewController(
            activityItems: [image],
            applicationActivities: nil
        )
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first,
           let rootViewController = window.rootViewController {
            
            // For iPad
            if let popover = activityController.popoverPresentationController {
                popover.sourceView = view
                popover.sourceRect = view.bounds
            }
            
            rootViewController.present(activityController, animated: true)
        }
    }
    
    func shareProjectFile(project: ShaderProject, from view: UIView) {
        guard let data = exportProjectData(project: project) else { return }
        
        let tempURL = FileManager.default.temporaryDirectory
            .appendingPathComponent("\(project.name).glslstudio")
        
        do {
            try data.write(to: tempURL)
            
            let activityController = UIActivityViewController(
                activityItems: [tempURL],
                applicationActivities: nil
            )
            
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let window = windowScene.windows.first,
               let rootViewController = window.rootViewController {
                
                // For iPad
                if let popover = activityController.popoverPresentationController {
                    popover.sourceView = view
                    popover.sourceRect = view.bounds
                }
                
                rootViewController.present(activityController, animated: true)
            }
        } catch {
            print("Failed to write project file: \(error)")
        }
    }
}

struct ProjectExportData: Codable {
    let name: String
    let createdDate: Date
    let lastModifiedDate: Date
    let vertexShader: String
    let fragmentShader: String
    let thumbnailData: Data?
}

// Enhanced Export Sheet
struct EnhancedExportSheet: View {
    let project: ShaderProject
    @Environment(\.dismiss) private var dismiss
    @StateObject private var exportService = ExportService()
    @State private var selectedExportType: ExportType = .code
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                Text("Export Project")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                VStack(spacing: 16) {
                    ExportTypeSelector(selectedType: $selectedExportType)
                    
                    ExportPreview(project: project, exportType: selectedExportType)
                    
                    ExportButton(
                        project: project,
                        exportType: selectedExportType,
                        exportService: exportService
                    ) {
                        dismiss()
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
}

enum ExportType: String, CaseIterable {
    case code = "Code"
    case image = "Image"
    case project = "Project"
    
    var icon: String {
        switch self {
        case .code: return "doc.text"
        case .image: return "photo"
        case .project: return "folder"
        }
    }
    
    var description: String {
        switch self {
        case .code: return "Export shader source code"
        case .image: return "Save current frame as image"
        case .project: return "Export complete project file"
        }
    }
}

struct ExportTypeSelector: View {
    @Binding var selectedType: ExportType
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Export Type")
                .font(.headline)
            
            HStack(spacing: 12) {
                ForEach(ExportType.allCases, id: \.self) { type in
                    Button(action: {
                        selectedType = type
                    }) {
                        VStack(spacing: 8) {
                            Image(systemName: type.icon)
                                .font(.title2)
                                .foregroundColor(selectedType == type ? .white : .accentColor)
                            
                            Text(type.rawValue)
                                .font(.caption)
                                .foregroundColor(selectedType == type ? .white : .primary)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(selectedType == type ? Color.accentColor : Color(.systemGray6))
                        .cornerRadius(12)
                    }
                    .buttonStyle(PlainButtonStyle())
                }
            }
        }
    }
}

struct ExportPreview: View {
    let project: ShaderProject
    let exportType: ExportType
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("Preview")
                .font(.headline)
            
            Text(exportType.description)
                .font(.body)
                .foregroundColor(.secondary)
            
            RoundedRectangle(cornerRadius: 8)
                .fill(Color(.systemGray6))
                .frame(height: 100)
                .overlay(
                    VStack {
                        Image(systemName: exportType.icon)
                            .font(.title)
                            .foregroundColor(.secondary)
                        Text("Preview: \(project.name)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                )
        }
    }
}

struct ExportButton: View {
    let project: ShaderProject
    let exportType: ExportType
    let exportService: ExportService
    let onComplete: () -> Void
    
    var body: some View {
        Button(action: performExport) {
            HStack {
                Image(systemName: "square.and.arrow.up")
                Text("Export \(exportType.rawValue)")
            }
            .font(.headline)
            .foregroundColor(.white)
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.accentColor)
            .cornerRadius(12)
        }
    }
    
    private func performExport() {
        // Create a dummy view for sharing context
        let dummyView = UIView()
        
        switch exportType {
        case .code:
            let code = exportService.exportShaderCode(project: project)
            exportService.shareContent(code, from: dummyView)
        case .image:
            // This would need to be implemented with WebGL capture
            print("Image export not yet implemented")
        case .project:
            exportService.shareProjectFile(project: project, from: dummyView)
        }
        
        onComplete()
    }
}